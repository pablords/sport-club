version: '3.7'


services:

  keycloak-db:
    container_name: keycloak-db
    restart: always
    image: mysql:5.7
    ports:
      - 3307:3306
    expose:
      - 3306
    networks:
      - services
    volumes:
      - keycloak-db-data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password

  keycloak:
    image: jboss/keycloak:16.1.1
    container_name: keycloak
    restart: unless-stopped
    networks:
      - services
    volumes:
      - ./realm-export.json:/tmp/realm-export.json
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: keycloak-db
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      KEYCLOAK_IMPORT: /tmp/realm-export.json -Dkeycloak.profile.feature.upload_scripts=enabled
      # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the MySQL JDBC driver documentation in order to use it.
      #JDBC_PARAMS: "connectTimeout=30000"
    ports:
      - 3004:8080
    depends_on:
      - keycloak-db
    healthcheck:
      test: curl --fail http://localhost:8080 || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s


      

  notifications-ms:
    container_name: notifications-ms
    restart: unless-stopped
    build:
      dockerfile: Dockerfile
      context: ../notifications-ms
      target: dev
    env_file: ../notifications-ms/.env
    volumes:
      - ../notifications-ms/:/opt/app/api
    ports:
      - 3002:3002
    networks:
      - services
    healthcheck:
      test: curl --fail http://localhost:3002 || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s


  checkin-ms:
    container_name: checkin-ms
    restart: unless-stopped
    depends_on: 
      - kafka
    build:
      dockerfile: Dockerfile
      context: ../checkin-ms
      target: dev
    env_file: ../checkin-ms/.env
    volumes:
      - ../checkin-ms/:/opt/app/api
    ports:
      - 3006:3006
    networks:
      - services
    healthcheck:
      test: curl --fail http://localhost:3006/api/v1 || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s
  
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    networks:
      - services
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    ports:
      - "9092:9092"
    networks:
      - services
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_LOGGERS: "kafka.authorizer.logger=INFO"
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO

  # control-center:
  #   image: confluentinc/cp-enterprise-control-center:latest
  #   hostname: control-center
  #   container_name: control-center
  #   networks:
  #     - services
  #   depends_on:
  #     - kafka
  #   ports:
  #     - "9021:9021"
  #   environment:
  #     CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:29092'
  #     CONTROL_CENTER_REPLICATION_FACTOR: 1
  #     PORT: 9021

  kafka-ui:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafka-ui
    networks:
      - services
    depends_on:
      - kafka
    ports:
      - 9000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
  partners-db-cache:
    image: "redis:alpine"
    env_file: ../partners-ms/.env
    container_name: partners-db-cache
    restart: always
    networks:
      - services
    ports:
      - 6379:6379
    volumes:
      - partners-db-cache-data:/data
    command: redis-server --requirepass Redis2019!
  
  partners-db:
    env_file: ../partners-ms/.env
    image: mysql:5.7
    restart: always
    container_name: partners-db
    ports:
      - 3306:3306
    networks:
      - services
    volumes:
      - partners-db-data:/var/lib/mysql
    command: --innodb_use_native_aio=0 --socket=/tmp/mysql.sock --bind_address=0.0.0.0

  partners-ms:
    restart: unless-stopped
    env_file: ../partners-ms/.env
    image: pablords/partners-ms:1.0.0
    container_name: partners-ms
    depends_on:
      - partners-db
      - manager-ms
    build: ../partners-ms
    #entrypoint: $SPORT_CLUB_HOME/partners-ms/.docker/entrypoint.sh
    ports:
      - 3001:3001
    networks:
      - services
    volumes:
      - ../partners-ms/:/home/node/app
    healthcheck:
      test: curl --fail http://localhost:3001/v1/health || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s
  
    command: /bin/bash -c npm run dev --prefix ../partners-ms/


  manager-ms:
    restart: unless-stopped
    env_file: ../manager-ms/.env
    image: pablords/manager-ms:1.0.0
    container_name: manager-ms
    depends_on:
      - keycloak-db
      - keycloak
      - manager-db-cache
    build: ../manager-ms
    ports:
      - 3003:3003
    networks:
      - services
    volumes:
      - ../manager-ms/:/home/node/app
    healthcheck:
      test: curl --fail http://localhost:3003/v1/health  || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s
    command: /bin/bash -c npm run dev --prefix ../manager-ms/


  manager-db-cache:
    image: "redis:alpine"
    env_file: ../manager-ms/.env
    container_name: manager-db-cache
    networks:
      - services
    ports:
      - 6378:6379
    volumes:
      - manager-db-cache-data:/data
    command: redis-server --requirepass Redis2019!

  payments-db:
    container_name: payments-db
    env_file: ../payments-ms/.env
    image: mysql:5.7
    ports:
      - 3308:3306
    expose:
      - 3306
    networks:
      - services
    volumes:
      - payments-db-data:/var/lib/mysql
    command: --innodb_use_native_aio=0 --socket=/tmp/mysql.sock --bind_address=0.0.0.0

  payments-ms:
    restart: unless-stopped
    env_file: ../payments-ms/.env
    image: pablords/payments-ms:1.0.0
    container_name: payments-ms
    depends_on:
      - payments-db
      - kafka
    build: ../payments-ms
    #entrypoint: $SPORT_CLUB_HOME/partners-ms/.docker/entrypoint.sh
    ports:
      - 3005:3005
    networks:
      - services
    volumes:
      - ../payments-ms/:/home/node/app
    healthcheck:
      test: curl --fail http://localhost:3000/health || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s
  
    command: /bin/bash -c yarn start:dev --cwd ../payments-ms/

  metrics-db:
    image: mongo
    container_name: metrics-db
    restart: always
    ports:
      - 27017:27017
    networks:
      - services
    environment:
      MONGO_INITDB_DATABASE: metrics-db
      MONGO_INITDB_ROOT_USERNAME: metrics-db
      MONGO_INITDB_ROOT_PASSWORD: metrics-db

volumes:
  keycloak-db-data:
  partners-db-data:
  partners-db-cache-data:
  manager-db-cache-data:
  payments-db-data:

networks:
  services:
    driver: 'bridge'